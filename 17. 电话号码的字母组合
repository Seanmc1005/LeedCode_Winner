（1）法一：这题难点在于循环的层数是n，是不确定的，我采用的是愚蠢的办法，它最多4层循环，我if判断一下就出来了，效果还可以。

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        //map['2']="abc"  char--->string;
        //length<=4,最多3^4个字符串。
        vector<string> result;
        map<char,string> kinds;
        kinds['2']="abc";
        kinds['3']="def";
        kinds['4']="ghi";
        kinds['5']="jkl";
        kinds['6']="mno";
        kinds['7']="pqrs";
        kinds['8']="tuv";
        kinds['9']="wxyz";
        int n=digits.length();
        if(n<1){
            return result;
        }
        string str[n];
        for(int i=0;i<n;i++){
            str[i]=kinds[digits[i]];
        }
        if(n==1){
            for(int i=0;i<str[0].length();i++){
                string temp="";
                temp+=str[0][i];
                result.push_back(temp);
            }
        }
        if(n==2){
            for(int i=0;i<str[0].length();i++){
                for(int j=0;j<str[1].length();j++){
                    string temp="";
                    temp+=str[0][i];
                    temp+=str[1][j];
                    result.push_back(temp);
                }
            }
        }
        if(n==3){
            for(int i=0;i<str[0].length();i++){
                for(int j=0;j<str[1].length();j++){
                    for(int x=0;x<str[2].length();x++){
                        string temp="";
                        temp+=str[0][i];
                        temp+=str[1][j];
                        temp+=str[2][x];
                        result.push_back(temp);
                    }
                }
            }
        }
        if(n==4){
            for(int i=0;i<str[0].length();i++){
                for(int j=0;j<str[1].length();j++){
                    for(int x=0;x<str[2].length();x++){
                        for(int y=0;y<str[3].length();y++){
                            string temp="";
                            temp+=str[0][i];
                            temp+=str[1][j];
                            temp+=str[2][x];
                            temp+=str[3][y];
                            result.push_back(temp);
                        }
                    }
                }
            }
        }
        return result;
    }
};

（2）法二：如何对于不确定循环层数的求解。
//yeah,按照N皇后去思考的回溯法，成功！

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        //map['2']="abc"  char--->string;
        //length<=4,最多3^4个字符串。
        vector<string> result;
        map<char,string> kinds;
        kinds['2']="abc";  //哈希表
        kinds['3']="def";
        kinds['4']="ghi";
        kinds['5']="jkl";
        kinds['6']="mno";
        kinds['7']="pqrs";
        kinds['8']="tuv";
        kinds['9']="wxyz";
        int n=digits.length();
        if(n<1){
            return result;
        }
        string *str=new string[n];
        int *index=new int[n];
        for(int i=0;i<n;i++){
            str[i]=kinds[digits[i]];
            index[i]=-1;
        }
        //回溯法
        int i=0;
        char *temp=new char[n];
        while(i>=0&&i<n){
            index[i]++;
            if(index[i]>=str[i].length()){
                index[i]=-1;
                i--;
            }
            else{
                temp[i]=str[i][index[i]];
                if(i==n-1){
                    string t="";
                    for(int j=0;j<n;j++){
                        t+=temp[j];
                    }
                    result.push_back(t);
                }
                else{
                    i++;
                }
            }
        }
        return result;
    }
};

