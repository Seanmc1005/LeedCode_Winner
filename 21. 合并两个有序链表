//简单：时间复杂度O(m+n)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* L=new ListNode();
        ListNode* p=L;
        if(l1==nullptr){
            return l2;
        }
        if(l2==nullptr){
            return l1;
        }
        while(l1!=nullptr&&l2!=nullptr){
            if(l1->val<=l2->val){
                p->next=l1;
                p=p->next;
                l1=l1->next;
            }
            else{
                p->next=l2;
                p=p->next;
                l2=l2->next;
            }
        }
        if(l1!=nullptr){
            p->next=l1;
        }
        else if(l2!=nullptr){
            p->next=l2;
        }
        return L->next;
    }
};

(2)法二：递归法

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
        //用递归;
        if(l1==nullptr){
            return l2;
        }
        if(l2==nullptr){
            return l1;
        }
        if(l1->val<=l2->val){
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }
        else{
            l2->next=mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};
